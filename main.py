# main.py

import os
import logging
import asyncio
import re
import uuid
from threading import Thread
from datetime import datetime
from flask import Flask, request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler
)
# === NOVO: Import do Supabase ===
from supabase import create_client, Client

# === CONFIGURA√á√ïES ===
TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
# === REMOVIDO: Configura√ß√µes do Google Sheets ===
# SPREADSHEET_ID = "1ShIhn1IQj8txSUshTJh_ypmzoyvIO40HLNi1ZN28rIo"
# ABA_NOME = "P√°gina1" # Aba principal de produtos
# ABA_USUARIOS = "Usuarios" # Nova aba para mapear user_id -> grupo_id
# CRED_FILE = "/etc/secrets/credentials.json" # Certifique-se de que este caminho est√° correto no Render

# === NOVO: Configura√ß√µes do Supabase ===
SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY")

# === NOVO: Inicializa√ß√£o do Cliente Supabase ===
if not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("SUPABASE_URL e SUPABASE_KEY devem ser definidos nas vari√°veis de ambiente.")
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# === ESTADOS DO CONVERSATION HANDLER === (mant√©m como est√°)
(
    MAIN_MENU,
    AWAIT_PRODUCT_DATA,
    CONFIRM_PRODUCT,
    AWAIT_EDIT_DELETE_CHOICE,
    AWAIT_EDIT_PRICE,
    AWAIT_DELETION_CHOICE,
    CONFIRM_DELETION,
    SEARCH_PRODUCT_INPUT,
    AWAIT_ENTRY_CHOICE,
    AWAIT_INVITE_CODE,
    AWAIT_INVITE_CODE_INPUT
) = range(11)

logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# === REMOVIDO: Fun√ß√µes do Google Sheets (get_sheet, get_usuarios_sheet, get_produtos_sheet) ===

# === NOVO: FUN√á√ïES PARA INTERAGIR COM O SUPABASE ===

async def get_grupo_id(user_id: int) -> str:
    """Obt√©m o grupo_id de um usu√°rio. Se n√£o existir, cria um novo grupo."""
    try:
        # Tenta encontrar o usu√°rio na tabela 'usuarios'
        response = supabase.table("usuarios").select("grupo_id").eq("user_id", user_id).execute()
        data = response.data

        if data: # <--- LINHA 69 CORRIGIDA CORRETAMENTE
            # Usu√°rio encontrado, retorna o grupo_id existente
            logging.info(f"Grupo encontrado para user_id {user_id}: {data[0]['grupo_id']}")
            return data[0]['grupo_id']
        else:
            # Usu√°rio n√£o encontrado, cria um novo grupo e usu√°rio
            novo_grupo_id = str(uuid.uuid4())
            insert_response = supabase.table("usuarios").insert({"user_id": user_id, "grupo_id": novo_grupo_id}).execute()
            logging.info(f"Novo grupo criado para user_id {user_id}: {novo_grupo_id}. Resposta: {insert_response}")
            return novo_grupo_id

    except Exception as e:
        logging.error(f"Erro ao obter/criar grupo_id para user_id {user_id}: {e}")
        # Fallback: usar o pr√≥prio user_id como grupo_id (menos ideal com Supabase)
        return str(user_id)


# === NOVA FUN√á√ÉO CORRIGIDA: ADICIONAR USU√ÅRIO AO GRUPO (adaptada) ===
async def adicionar_usuario_ao_grupo(novo_user_id: int, codigo_convite: str, convidante_user_id: int = None):
    """Adiciona um novo usu√°rio a um grupo baseado no c√≥digo de convite (que √© o grupo_id)."""
    try:
        # 1. Verificar se o codigo_convite (grupo_id) existe na tabela 'usuarios'
        response = supabase.table("usuarios").select("grupo_id").eq("grupo_id", codigo_convite).limit(1).execute()
        if not response.data:
            return False, "‚ùå C√≥digo de convite inv√°lido."

        grupo_id_para_adicionar = codigo_convite

        # 2. Verificar se o usu√°rio j√° est√° NO MESMO grupo
        check_response = supabase.table("usuarios").select("grupo_id").eq("user_id", novo_user_id).eq("grupo_id", grupo_id_para_adicionar).execute()
        if check_response.data:
            return True, f"‚úÖ Voc√™ j√° est√° no grupo '{grupo_id_para_adicionar}'."

        # 3. Verificar se o usu√°rio j√° existe (em outro grupo)
        exists_response = supabase.table("usuarios").select("user_id").eq("user_id", novo_user_id).execute()
        if exists_response.data:
            # Atualiza o grupo_id do usu√°rio existente
            update_response = supabase.table("usuarios").update({"grupo_id": grupo_id_para_adicionar}).eq("user_id", novo_user_id).execute()
            logging.info(f"Usu√°rio {novo_user_id} atualizado para o grupo {grupo_id_para_adicionar}. Resposta: {update_response}")
        else:
            # Adiciona novo usu√°rio
            insert_response = supabase.table("usuarios").insert({"user_id": novo_user_id, "grupo_id": grupo_id_para_adicionar}).execute()
            logging.info(f"Usu√°rio {novo_user_id} adicionado ao grupo {grupo_id_para_adicionar}. Resposta: {insert_response}")

        logging.info(f"Notifica√ß√£o: Novo membro {novo_user_id} entrou no grupo {grupo_id_para_adicionar}. Convidado por {convidante_user_id}")
        return True, f"‚úÖ Voc√™ foi adicionado ao grupo '{grupo_id_para_adicionar}'!"

    except Exception as e:
        logging.error(f"Erro ao adicionar usu√°rio {novo_user_id} ao grupo com convite {codigo_convite}: {e}")
        return False, "‚ùå Erro ao processar o convite. Tente novamente mais tarde."


# === REMOVIDO: listar_membros_do_grupo (n√£o est√° sendo usada no c√≥digo atual) ===

# === FUN√á√ïES AUXILIARES === (mant√©m como est√°)
def format_price(price):
    """Formata float para string com v√≠rgula decimal (para exibi√ß√£o)"""
    # Garante que o input seja float
    try:
        price_float = float(price)
    except (ValueError, TypeError):
        return "0,00"
    return "{:,.2f}".format(price_float).replace(".", ",")

def parse_price(price_str):
    """Converte string de pre√ßo para float."""
    try:
        return float(price_str.replace(',', '.'))
    except ValueError:
        return None

# === FUN√á√ÉO CORRIGIDA: CALCULAR PRE√áO POR UNIDADE === (mant√©m como est√°)
# (A fun√ß√£o calculate_unit_price permanece a mesma)

# === TECLADOS === (mant√©m como est√°)
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ûï Adicionar Produto"), KeyboardButton("‚úèÔ∏è Editar/Excluir")],
        [KeyboardButton("üîç Pesquisar Produto"), KeyboardButton("üìã Listar Produtos")],
        [KeyboardButton("üë™ Compartilhar Lista"), KeyboardButton("üîê Inserir C√≥digo")]
    ], resize_keyboard=True)

def cancel_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("‚ùå Cancelar")]], resize_keyboard=True)

# === HANDLERS === (adaptados onde interagem com dados)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # === USANDO A NOVA FUN√á√ÉO COM SUPABASE ===
    grupo_id = await get_grupo_id(user_id)
    await update.message.reply_text(
        f"üõí *Bot de Compras Inteligente* üõí\n"
        f"Seu grupo compartilhado: `{grupo_id}`\n\n"
        f"Escolha uma op√ß√£o ou digite o nome de um produto para pesquisar:",
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )
    return MAIN_MENU

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (mant√©m como est√°)
    help_text = (
        "üõí *Como adicionar um produto corretamente:*\n"
        "Use o seguinte formato (uma linha por produto):\n"
        "*Produto, Tipo, Marca, Unidade, Pre√ßo, Observa√ß√µes*\n\n"
        "*Exemplos:*\n"
        "‚Ä¢ Arroz, Branco, Camil, 5 kg, 25.99\n"
        "‚Ä¢ Leite, Integral, Italac, 1 L, 4.49\n"
        "‚Ä¢ Papel Higi√™nico, Compacto, Max, 12 rolos 30M, 14.90 ‚Üê Sem v√≠rgula entre rolos e metros\n"
        "‚Ä¢ Creme Dental, Sensitive, Colgate, 180g, 27.75, 3 tubos de 60g\n"
        "‚Ä¢ Ovo, Branco, Grande, 30 und, 16.90\n"
        "‚Ä¢ Sab√£o em P√≥, Concentrado, Omo, 1.5 kg, 22.50\n"
        "‚Ä¢ Refrigerante, Coca-Cola, 2 L, 8.99\n"
        "‚Ä¢ Chocolate, Ao Leite, Nestl√©, 90g, 4.50\n\n"
        "*üí° Dicas:*\n"
        "- Use **ponto como separador decimal** no pre√ßo (Ex: 4.99).\n"
        "- Para Papel Higi√™nico, use o formato: [Quantidade] rolos [Metragem]M (Ex: 12 rolos 30M).\n"
        "- Para produtos com m√∫ltiplas embalagens (como '3 tubos de 90g'), descreva assim para que o sistema calcule o custo por unidade.\n"
        "- O sistema automaticamente calcular√° o **pre√ßo por unidade de medida** (Kg, L, ml, g, und, rolo, metro, etc.) e informar√° qual op√ß√£o √© mais econ√¥mica.\n"
        "- Voc√™ tamb√©m pode digitar diretamente o nome de um produto para pesquisar seu pre√ßo!\n"
        "- Use os bot√µes abaixo para compartilhar ou acessar listas."
    )
    # Criar um teclado inline com os bot√µes de compartilhar e inserir c√≥digo
    keyboard = [
        [InlineKeyboardButton("üë™ Compartilhar Lista", callback_data="compartilhar_lista")],
        [InlineKeyboardButton("üîê Inserir C√≥digo", callback_data="inserir_codigo")] # Novo bot√£o
    ]
    reply_markup_inline = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(help_text, reply_markup=reply_markup_inline, parse_mode="Markdown")
    # Manter o teclado principal tamb√©m
    await update.message.reply_text("...", reply_markup=main_menu_keyboard())
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (mant√©m como est√°)
    await update.message.reply_text("‚ùå Opera√ß√£o cancelada.", reply_markup=main_menu_keyboard())
    return MAIN_MENU

# === NOVAS FUN√á√ïES PARA INSERIR C√ìDIGO === (adaptadas)
async def ask_for_invite_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Pede ao usu√°rio para digitar o c√≥digo de convite."""
    await update.message.reply_text("üîê Digite o c√≥digo do grupo que voc√™ recebeu:", reply_markup=cancel_keyboard())
    return AWAIT_INVITE_CODE_INPUT

async def handle_invite_code_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Processa o c√≥digo de convite digitado pelo usu√°rio."""
    if update.message.text == "‚ùå Cancelar":
        return await cancel(update, context)

    codigo_convite = update.message.text.strip()
    user_id = update.effective_user.id

    # === USANDO A NOVA FUN√á√ÉO COM SUPABASE ===
    sucesso, mensagem = await adicionar_usuario_ao_grupo(user_id, codigo_convite)

    if sucesso:
        await update.message.reply_text(mensagem, reply_markup=main_menu_keyboard())
        # Ap√≥s entrar, mostra a lista de produtos do novo grupo
        return await list_products(update, context)
    else:
        await update.message.reply_text(mensagem, reply_markup=main_menu_keyboard())
        return MAIN_MENU

# === NOVA FUN√á√ÉO CALLBACK PARA O BOT√ÉO INLINE === (mant√©m como est√°, usa get_grupo_id)
async def inserir_codigo_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback para o bot√£o 'Inserir C√≥digo' no teclado inline."""
    query = update.callback_query
    await query.answer() # Responde ao clique do bot√£o
    # Edita a mensagem para mostrar o prompt de digitar o c√≥digo
    await query.edit_message_text("üîê Digite o c√≥digo do grupo que voc√™ recebeu:")
    # Como n√£o podemos mudar o teclado facilmente aqui, vamos enviar uma nova mensagem
    await query.message.reply_text("...", reply_markup=cancel_keyboard())
    # E uma nova mensagem com o teclado principal
    await query.message.reply_text("...", reply_markup=main_menu_keyboard())
    # O estado ser√° gerenciado pelo MessageHandler no teclado principal
    return AWAIT_INVITE_CODE_INPUT # Inicia o fluxo de digita√ß√£o de c√≥digo

# =================================================
# === NOVA FUN√á√ÉO: COMPARTILHAR LISTA === (adaptada)
async def compartilhar_lista_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Callback para o bot√£o 'Compartilhar Lista'."""
    query = update.callback_query
    await query.answer() # Responde ao clique do bot√£o
    user_id = query.from_user.id
    try:
        # === USANDO A NOVA FUN√á√ÉO COM SUPABASE ===
        grupo_id = await get_grupo_id(user_id)

        # Mensagem explicativa
        await query.edit_message_text(
            f"üîê *Compartilhe este c√≥digo com seus familiares para que eles possam acessar a mesma lista de compras:*\n\n"
            f"Caso prefira, compartilhe o c√≥digo abaixo:"
        )
        # Segunda mensagem: c√≥digo
        # Como n√£o podemos editar para enviar outra mensagem, enviamos uma nova
        await query.message.reply_text(f"üîê C√≥digo do grupo: `{grupo_id}`", parse_mode="Markdown")
        # Reenvia o menu principal
        await query.message.reply_text("...", reply_markup=main_menu_keyboard())

    except Exception as e:
        logging.error(f"Erro ao gerar convite para user_id {user_id}: {e}")
        await query.edit_message_text("‚ùå Erro ao gerar convite. Tente novamente mais tarde.")
        await query.message.reply_text("...", reply_markup=main_menu_keyboard())

# === ADICIONAR PRODUTO === (mant√©m ask_for_product_data e handle_product_data como est√°)
# Modificando apenas confirm_product

async def ask_for_product_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (mant√©m como est√°)
    await update.message.reply_text(
        "üìù Digite os dados do produto no formato:\n"
        "*Produto, Tipo, Marca, Unidade, Pre√ßo, Observa√ß√µes*\n\n"
        "*Exemplos:*\n"
        "‚Ä¢ Arroz, Branco, Camil, 5 kg, 25.99\n"
        "‚Ä¢ Leite, Integral, Italac, 1 L, 4.49\n"
        "‚Ä¢ Papel Higi√™nico, Compacto, Max, 12 rolos 30M, 14.90 ‚Üê Sem v√≠rgula entre rolos e metros\n"
        "‚Ä¢ Creme Dental, Sensitive, Colgate, 180g, 27.75, 3 tubos de 60g\n"
        "‚Ä¢ Ovo, Branco, Grande, 30 und, 16.90\n"
        "Ou digite ‚ùå *Cancelar* para voltar",
        reply_markup=cancel_keyboard(),
        parse_mode="Markdown"
    )
    return AWAIT_PRODUCT_DATA

async def handle_product_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # ... (mant√©m como est√°)
    if update.message.text == "‚ùå Cancelar":
        return await cancel(update, context)

    data = [item.strip() for item in update.message.text.split(",")]
    if len(data) < 5:
        await update.message.reply_text(
            "‚ö†Ô∏è Formato inv√°lido. Voc√™ precisa informar pelo menos:\n"
            "*Produto, Tipo, Marca, Unidade, Pre√ßo*\n\n"
            "*Exemplos:*\n"
            "‚Ä¢ Arroz, Branco, Camil, 5 kg, 25.99\n"
            "‚Ä¢ Leite, Integral, Italac, 1 L, 4.49\n"
            "‚Ä¢ Papel Higi√™nico, Compacto, Max, 12 rolos 30M, 14.90 ‚Üê Sem v√≠rgula entre rolos e metros\n"
            "‚Ä¢ Creme Dental, Sensitive, Colgate, 180g, 27.75, 3 tubos de 60g\n"
            "‚Ä¢ Ovo, Branco, Grande, 30 und, 16.90\n\n"
            "Ou digite ‚ùå *Cancelar* para voltar",
            reply_markup=cancel_keyboard(),
            parse_mode="Markdown"
        )
        return AWAIT_PRODUCT_DATA

    price_str = data[4].strip()
    price = parse_price(price_str)
    if price is None:
        await update.message.reply_text(
            "‚ö†Ô∏è Pre√ßo inv√°lido. Use **ponto como separador decimal** (ex: 4.99).\n"
            "Por favor, digite novamente os dados do produto:",
            reply_markup=cancel_keyboard(),
            parse_mode="Markdown"
        )
        return AWAIT_PRODUCT_DATA

    product = {
        'nome': data[0].title(),
        'tipo': data[1].title(),
        'marca': data[2].title(),
        'unidade': data[3].strip(),
        'preco': price_str, # Mant√©m como string para compatibilidade com partes do c√≥digo
        'observacoes': data[5] if len(data) > 5 else ""
    }

    # Calcular pre√ßo por unidade
    unit_info = calculate_unit_price(product['unidade'], price)
    logging.info(f"Unit info calculado para {product['nome']}: {unit_info}")

    # Montar mensagem de confirma√ß√£o com os pre√ßos calculados
    message = f"üì¶ *Produto*: {product['nome']}\n"
    message += f"üè∑Ô∏è *Tipo*: {product['tipo']}\n"
    message += f"üè≠ *Marca*: {product['marca']}\n"
    message += f"üìè *Unidade*: {product['unidade']}\n"
    message += f"üí∞ *Pre√ßo*: R$ {format_price(price)}\n"
    if product['observacoes']:
        message += f"üìù *Observa√ß√µes*: {product['observacoes']}\n\n"
    else:
        message += "\n"

    message += "üìä *C√°lculo de Pre√ßo por Unidade:*\n"
    # Exibir os pre√ßos calculados de forma mais clara
    if 'preco_por_kg' in unit_info:
        message += f"üìä *Pre√ßo por kg*: R$ {format_price(unit_info['preco_por_kg'])}\n"
    if 'preco_por_100g' in unit_info:
        message += f"üìä *Pre√ßo por 100g*: R$ {format_price(unit_info['preco_por_100g'])}\n"
    if 'preco_por_litro' in unit_info:
        message += f"üìä *Pre√ßo por litro*: R$ {format_price(unit_info['preco_por_litro'])}\n"
    if 'preco_por_100ml' in unit_info: # Inclui pre√ßo por 100ml para L e ml
        message += f"üìä *Pre√ßo por 100ml*: R$ {format_price(unit_info['preco_por_100ml'])}\n"
    if 'preco_por_unidade' in unit_info:
        message += f"üìä *Pre√ßo por unidade*: R$ {format_price(unit_info['preco_por_unidade'])}\n"
    if 'preco_por_embalagem' in unit_info:
         # Para produtos com m√∫ltiplas embalagens
         message += f"üìä *Pre√ßo por embalagem*: R$ {format_price(unit_info['preco_por_embalagem'])}\n"
         if 'preco_por_100' in unit_info:
             message += f"üìä *Pre√ßo por 100 (g/ml)*: R$ {format_price(unit_info['preco_por_100'])}\n"
         elif 'preco_por_100_base' in unit_info:
             message += f"üìä *Pre√ßo por 100 (g/ml)*: R$ {format_price(unit_info['preco_por_100_base'])}\n"
    # === Exibi√ß√£o espec√≠fica para Papel Higi√™nico ===
    if 'preco_por_rolo' in unit_info and 'preco_por_metro' in unit_info:
        # Caso espec√≠fico para Papel Higi√™nico (ou outros com m√∫ltiplas unidades)
        message += f"üìä *Pre√ßo por rolo*: R$ {format_price(unit_info['preco_por_rolo'])}\n"
        message += f"üìä *Pre√ßo por metro*: R$ {format_price(unit_info['preco_por_metro'])}\n"
    # =================================================
    if 'preco_por_folha' in unit_info:
        message += f"üìä *Pre√ßo por folha*: R$ {format_price(unit_info['preco_por_folha'])}\n"

    message += "\nDigite ‚úÖ *Confirmar* para salvar ou ‚ùå *Cancelar* para corrigir"

    context.user_data['current_product'] = product
    context.user_data['unit_info'] = unit_info
    await update.message.reply_text(
        message,
        reply_markup=ReplyKeyboardMarkup([[KeyboardButton("‚úÖ Confirmar"), KeyboardButton("‚ùå Cancelar")]], resize_keyboard=True),
        parse_mode="Markdown"
    )
    return CONFIRM_PRODUCT

async def confirm_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text != "‚úÖ Confirmar":
        return await cancel(update, context)

    product = context.user_data.get('current_product')
    unit_info = context.user_data.get('unit_info')
    if not product or not unit_info:
        await update.message.reply_text("‚ùå Erro ao confirmar produto. Tente novamente.")
        return MAIN_MENU

    user_id = update.effective_user.id
    try:
        # === USANDO A NOVA FUN√á√ÉO COM SUPABASE ===
        grupo_id = await get_grupo_id(user_id)

        # Formatar a string do pre√ßo por unidade para salvar (mant√©m como est√°)
        # Prioriza os c√°lculos mais relevantes para compara√ß√£o
        if 'preco_por_metro' in unit_info: # Papel Higi√™nico
            unit_price_str = f"R$ {format_price(unit_info['preco_por_metro'])}/metro"
        elif 'preco_por_100g' in unit_info: # Produtos em gramas
            unit_price_str = f"R$ {format_price(unit_info['preco_por_100g'])}/100g"
        elif 'preco_por_kg' in unit_info: # Produtos em kg
            unit_price_str = f"R$ {format_price(unit_info['preco_por_kg'])}/kg"
        elif 'preco_por_100ml' in unit_info: # Produtos em ml ou L convertido
             unit_price_str = f"R$ {format_price(unit_info['preco_por_100ml'])}/100ml"
        elif 'preco_por_litro' in unit_info: # Fallback para L se 100ml n√£o estiver
             unit_price_str = f"R$ {format_price(unit_info['preco_por_litro'])}/L"
        elif 'preco_por_unidade' in unit_info: # Produtos unit√°rios
            unit_price_str = f"R$ {format_price(unit_info['preco_por_unidade'])}/unidade"
        elif 'preco_por_embalagem' in unit_info: # Produtos com m√∫ltiplas embalagens
             if 'preco_por_100' in unit_info:
                 unit_price_str = f"R$ {format_price(unit_info['preco_por_100'])}/100(g/ml)"
             elif 'preco_por_100_base' in unit_info:
                 unit_price_str = f"R$ {format_price(unit_info['preco_por_100_base'])}/100(g/ml)"
             else:
                 unit_price_str = f"R$ {format_price(unit_info['preco_por_embalagem'])}/embalagem"
        elif 'preco_por_rolo' in unit_info: # Rolos simples
            unit_price_str = f"R$ {format_price(unit_info['preco_por_rolo'])}/rolo"
        elif 'preco_por_folha' in unit_info:
            unit_price_str = f"R$ {format_price(unit_info['preco_por_folha'])}/folha"
        else:
            unit_price_str = f"R$ {format_price(parse_price(product['preco']))}/unidade"

        # timestamp = datetime.now().strftime("%d/%m/%Y %H:%M:%S") # Opcional, usar o default now() do banco

        # === SALVANDO NO SUPABASE ===
        novo_produto = {
            "grupo_id": grupo_id,
            "nome": product['nome'],
            "tipo": product['tipo'],
            "marca": product['marca'],
            "unidade": product['unidade'],
            "preco": float(product['preco']), # Converter para n√∫mero para o banco
            "observacoes": product['observacoes'],
            "preco_por_unidade_formatado": unit_price_str,
            # "timestamp": timestamp # Considere usar o default now() do banco ou um objeto datetime
        }

        response = supabase.table("produtos").insert(novo_produto).execute()
        logging.info(f"Produto salvo no Supabase. Resposta: {response}")

        await update.message.reply_text(
            f"‚úÖ Produto *{product['nome']}* salvo com sucesso na lista do grupo!",
            reply_markup=main_menu_keyboard(),
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"Erro ao salvar produto no Supabase: {e}")
        await update.message.reply_text(
            "‚ùå Erro ao salvar produto. Tente novamente mais tarde.",
            reply_markup=main_menu_keyboard()
        )
    return MAIN_MENU


# === LISTAR PRODUTOS === (adaptada)
async def list_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    try:
        # === USANDO A NOVA FUN√á√ÉO COM SUPABASE ===
        grupo_id = await get_grupo_id(user_id)

        # === CONSULTANDO O SUPABASE ===
        # Seleciona todos os campos (*), filtra por grupo_id, ordena por timestamp DESC, limita a 20
        # NOTA: A coluna no Supabase √© 'timestamp', n√£o 'Timestamp'
        response = supabase.table("produtos").select("*").eq("grupo_id", grupo_id).order("timestamp", desc=True).limit(20).execute()
        produtos_do_grupo = response.data

        if not produtos_do_grupo:
            await update.message.reply_text("üì≠ Nenhum produto na lista ainda.", reply_markup=main_menu_keyboard())
            return MAIN_MENU

        texto = "üìã *Lista de Produtos do seu Grupo:*\n\n"
        # Mostra os √∫ltimos 20 registros
        for produto in produtos_do_grupo: # Acessa os dados como dicion√°rios
            # NOTA: Os nomes das colunas no Supabase s√£o os mesmos definidos na tabela
            obs = f" ({produto['observacoes']})" if produto['observacoes'] else ""
            # Usa format_price para formatar o pre√ßo vindo do banco (n√∫mero)
            texto += f"üîπ *{produto['nome']}* - {produto['marca']} - {produto['unidade']} - R${format_price(produto['preco'])}{obs}\n"
        await update.message.reply_text(texto, parse_mode="Markdown", reply_markup=main_menu_keyboard())
    except Exception as e:
        logging.error(f"Erro ao listar produtos do Supabase: {e}")
        await update.message.reply_text("‚ùå Erro ao acessar a lista.", reply_markup=main_menu_keyboard())
    return MAIN_MENU


# === FLASK + WEBHOOK === (mant√©m como est√°, incluindo o /healthz)
# A √öNICA ALTERA√á√ÉO EST√Å NA FUN√á√ÉO ABAIXO
app = Flask(__name__)
application = None

@app.route("/healthz")
def healthz():
    return "OK", 200

@app.route("/")
def home():
    return "üõí Bot de Compras est√° no ar!", 200

# >>>>> FUN√á√ÉO WEBHOOK MODIFICADA PARA SER S√çNCRONA <<<<<
@app.route("/webhook", methods=["POST"])
def webhook(): # <--- Removido 'async'
    json_data = request.get_json()
    update = Update.de_json(json_data, application.bot)
    # <--- Removido 'await' e usado o m√©todo s√≠ncrono
    application.process_update(update)
    return "OK", 200
# >>>>> FIM DA ALTERA√á√ÉO <<<<<

# === MAIN === (mant√©m como est√°)
async def start_bot():
    global application

    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex("^‚ûï Adicionar Produto$"), ask_for_product_data),
                MessageHandler(filters.Regex("^üîç Pesquisar Produto$"), lambda u, c: SEARCH_PRODUCT_INPUT), # Placeholder
                MessageHandler(filters.Regex("^üìã Listar Produtos$"), list_products),
                MessageHandler(filters.Regex("^‚úèÔ∏è Editar/Excluir$"), lambda u, c: AWAIT_EDIT_DELETE_CHOICE), # Placeholder
                MessageHandler(filters.Regex("^üë™ Compartilhar Lista$"), lambda u, c: compartilhar_lista_callback(u, c)),
                MessageHandler(filters.Regex("^üîê Inserir C√≥digo$"), ask_for_invite_code),
                MessageHandler(filters.COMMAND, help_command), # Para /help ou outros comandos
            ],
            AWAIT_PRODUCT_DATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product_data)],
            CONFIRM_PRODUCT: [MessageHandler(filters.Regex("^(‚úÖ Confirmar|‚ùå Cancelar)$"), confirm_product)],
            AWAIT_INVITE_CODE_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_invite_code_input)],
            # Adicione outros estados conforme necess√°rio
        },
        fallbacks=[MessageHandler(filters.Regex("^‚ùå Cancelar$"), cancel)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(compartilhar_lista_callback, pattern="^compartilhar_lista$"))
    application.add_handler(CallbackQueryHandler(inserir_codigo_callback, pattern="^inserir_codigo$"))

    await application.initialize()
    await application.bot.set_webhook(url=f"{os.environ['RENDER_EXTERNAL_URL']}/webhook")
    await application.start()

    while True:
        await asyncio.sleep(3600)

def run_flask():
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

if __name__ == "__main__":
    logging.info("Iniciando bot com webhook via Flask")
    Thread(target=run_flask).start()
    asyncio.run(start_bot())
